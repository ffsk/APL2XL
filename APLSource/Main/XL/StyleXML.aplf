 StyleXML←{
    ⍝. ⍵ ←→ workbook, instance of #.WB
    ⍝⍝⍝. TODO: This function is under construction
    ⍝⍝⍝. TODO: Refactor all styles to use ⎕XML
     wb←⍵
     s←wb.Styles
    ⍝. Styles within spreadsheetML are implemented to minimize repetition, and this is done with collections.
    ⍝. Within the styles part there are the collections shown below.
    ⍝. Most of the collections (except for <dxfs> and <tableStyles>) relate to cells.
    ⍝. The first four--numFmts, fonts, fills, and borders--contain all of the possible charateristics for every cell in the workbook
    ⍝. Each may have many elements, each one defining the characteristics for a set of cells that have the same such characteristics.
    ⍝. The formatting for a cell can be specified with a list or collection of indices into these four collections.
    ⍝. And in fact, that is what the <cellXfs> is.
    ⍝. It contains a collection of groups of indices, one group for every combination of cell formatting characteristics found in the workbook.

     ⍝. collection generates the tag for each collection within the style document
     ⍝. Complete descriptions of the collections can be found in the comments below
     collection←{⍺(⊂'count'(≢⍵))tag(⍺⍺¨↓⍵)}

     ⍝. Define functions for a single element in each of the collections.
     ⍝. Collections such as numFmts fills fonts and borders all have unique tags
     ⍝. The following functions define each single tag of the collections

     ⍝. TODO: use ⎕XML
     fill←{
         ⍝. ⍵[0] ←→ patternFill type
         ⍝. ⍵[1] ←→ foreground fill info (TODO: not complete)
         ⍝. ⍵[2] ←→ background fill info (TODO: not complete)
         ⍝. a single fill tag
         full←{⍝ TODO: Complete, there are more properties necessary
             (p f b)←⍵
             foreground←'fgColor'(⊂'rgb'f)tag''
             background←'bgColor'(⊂'rgb'b)tag''
             'patternFill'(⊂'patternType'p)tag∊foreground background
         }
         partial←{pattern←'patternFill'(⊂'patternType'⍵)tag''}
         (⊂'')∊⍵:'fill'tag partial⊃⍵ ⍝ partial has no body
         'fill'tag full ⍵            ⍝ full contains background and foreground properties
     }

     border←{
         ⍝. ⍵ ←→ 5 element vector, if ⍵≡5⍴'', only an empty default tag is generated
         ⍝. otherwise: ⍵ ←→ 5⍴(⊂style<charvec> color<int>), 5 element vector of tuples containing style and color each
         default←{'left' 'right' 'top' 'bottom' 'diagonal'tag¨5⍴''} ⍝ default borders have no values
         body←{ ⍝. ⍵ ←→ 5⍴(⊂style<charvec> color<int>)
             t←{ ⍝ helper function for building direction tags
                 ''≡⍵:⍺ tag'' ⍝ empty tag for this border position
                 (s c)←⍵
                 ⍺(⊂'style's)tag('color'(⊂'rgb'c)tag'')
             }
             'left' 'right' 'top' 'bottom' 'diagonal't¨⍵
         }
         (5⍴'')≡⍵:'border'tag∊default''
         'border'tag body ⍵
     }

     styleXF←{⍝ TODO: Implement
         '<xf numFmtId="0" fontId="0" fillId="0" borderId="0"/>'
     }
     cellStyle←{⍝ TODO: Implement
         '<cellStyle name="Normal" xfId="0" builtinId="0"/>'
     }
     table←{⍝ TODO: Implement
         '<tableStyles count="0" defaultTableStyle="TableStyleMedium2" defaultPivotStyle="PivotStyleLight16"/>'
     }

     general←{⍝. Used for generating xml for numFmts and cellXfs
         (parent child)←2↑⍺
         tags←2↓⍺
         p←(0 parent ''),(⊂1 2⍴'count'(≢⍵))
         c←(1 child ''),⍤1 0⊂⍤2⍉⍤2⊢((≢⍵),2,(≢tags))⍴tags,⍤1⊢⍵
         ⎕XML p⍪c
     }

     font←{⍝. Generates xml for fonts
        fattr←'val' 'theme' 'val' 'val'
        fontprops←⍉⍤2⊢((≢⍵),2,(≢fattr))⍴fattr,⍤1⊢⍵
        fontCells←{(⍉3 4⍴2 2 2 2 'sz' 'color' 'name' 'family' '' '' '' ''),⊂⍤1⊢⍵}⍤2⊢fontprops
        fontCollection←,[⍳2](1 'font' '' '')⍪⍤2⊢fontCells
        ⎕XML((0 'fonts' ''),(⊂1 2⍴'count'(≢⍵)))⍪fontCollection
     }

     numFmts←'numFmts' 'numFmt' 'numFmtId' 'formatCode' general {(⍪r+163×0≠r←⍳≢⍵),⍵}s.numFmts
     cellXfs←'cellXfs' 'xf' 'numFmtId' 'fontId' 'fillId' 'borderId' 'xfid' general {⍵,⍳≢⍵}s.cellXfs
     fonts←font s.fonts

     ⍝. TODO: refactor the following to use ⎕XML
     fills←'fills'(fill collection)s.fills 
     borders←'borders'(border collection)s.borders
     cellStyleXfs←'cellStyleXfs'(styleXF collection)' ' ⍝ TODO: add s.cellStyleXfs in Main.XL.WB
     cellStyles←'cellStyles'(cellStyle collection)' '   ⍝ TODO: add s.cellStyles in Main.XL.WB
     tableStyles←table''                                ⍝'tableStyles'(table     collection)''  ⍝ TODO: add s.tableStyles in Main.XL.WB
     dxfs←'<dxfs count="0"/>'                           ⍝TODO: implement

     ⍝ TODO: implement
     extLst←#.Main.Templates.xmls.getWith'extlst'

     ⍝. Header is (currently) static, only the body is generated
     env←(⍬),(⊂'body' (∊numFmts fonts fills borders cellStyleXfs cellXfs cellStyles dxfs tableStyles extLst))
     env#.Main.Templates.xmls.getWith'st_hdr'
 }
